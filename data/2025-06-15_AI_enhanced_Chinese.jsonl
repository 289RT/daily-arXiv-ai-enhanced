{"id": "2506.10015", "pdf": "https://arxiv.org/pdf/2506.10015", "abs": "https://arxiv.org/abs/2506.10015", "authors": ["Chuqiao Zhang", "Sarath Chandra Dantu", "Debarghya Mitra", "Dalia Chakrabarty"], "title": "Identifying critical residues of a protein using meaningfully-thresholded Random Geometric Graphs", "categories": ["q-bio.BM", "cs.LG", "stat.ML"], "comment": "submitted to Journal of Computational and Graphical Statistics", "summary": "Identification of critical residues of a protein is actively pursued, since\nsuch residues are essential for protein function. We present three ways of\nrecognising critical residues of an example protein, the evolution of which is\ntracked via molecular dynamical simulations. Our methods are based on learning\na Random Geometric Graph (RGG) variable, where the state variable of each of\n156 residues, is attached to a node of this graph, with the RGG learnt using\nthe matrix of correlations between state variables of each residue-pair. Given\nthe categorical nature of the state variable, correlation between a residue\npair is computed using Cramer's V. We advance an organic thresholding to learn\nan RGG, and compare results against extant thresholding techniques, when\nparametrising criticality as the nodal degree in the learnt RGG. Secondly, we\ndevelop a criticality measure by ranking the computed differences between the\nposterior probability of the full graph variable defined on all 156 residues,\nand that of the graph with all but one residue omitted. A third parametrisation\nof criticality informs on the dynamical variation of nodal degrees as the\nprotein evolves during the simulation. Finally, we compare results obtained\nwith the three distinct criticality parameters, against\nexperimentally-ascertained critical residues.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86\u4e09\u79cd\u8bc6\u522b\u86cb\u767d\u8d28\u5173\u952e\u6b8b\u57fa\u7684\u65b9\u6cd5\uff0c\u5e76\u901a\u8fc7\u5206\u5b50\u52a8\u529b\u5b66\u6a21\u62df\u8ddf\u8e2a\u86cb\u767d\u8d28\u7684\u6f14\u53d8\u3002", "motivation": "\u8bc6\u522b\u86cb\u767d\u8d28\u4e2d\u7684\u5173\u952e\u6b8b\u57fa\u5bf9\u7406\u89e3\u5176\u529f\u80fd\u81f3\u5173\u91cd\u8981\u3002", "method": "\u57fa\u4e8e\u968f\u673a\u51e0\u4f55\u56fe\uff08RGG\uff09\u5b66\u4e60\uff0c\u5229\u7528\u6b8b\u57fa\u5bf9\u72b6\u6001\u53d8\u91cf\u95f4\u7684\u76f8\u5173\u6027\u548c\u52a8\u6001\u53d8\u5316\u6765\u5b9a\u4e49\u5173\u952e\u6027\u3002", "result": "\u4e09\u79cd\u65b9\u6cd5\u80fd\u591f\u6709\u6548\u8bc6\u522b\u5173\u952e\u6b8b\u57fa\uff0c\u5e76\u4e0e\u5b9e\u9a8c\u7ed3\u679c\u4e00\u81f4\u3002", "conclusion": "\u4e09\u79cd\u65b9\u6cd5\u4e3a\u86cb\u767d\u8d28\u5173\u952e\u6b8b\u57fa\u8bc6\u522b\u63d0\u4f9b\u4e86\u65b0\u89c6\u89d2\u548c\u5de5\u5177\u3002"}}
